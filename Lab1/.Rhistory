a <- 5
samples <- numeric(n)
x_candidate <- runif(1, 0, 2)  # Генерируем x из U(0,2)
y_candidate <- runif(1, 0, 1 / (4 * pi) * 3)  # Верхняя граница f(x)
if (y_candidate <= f_x(x_candidate)) {
count <- count + 1
samples[count] <- x_candidate
}
while (count < n) {
x_candidate <- runif(1, 0, 2)  # Генерируем x из U(0,2)
y_candidate <- runif(1, 0, 1 / (4 * pi) * 3)  # Верхняя граница f(x)
if (y_candidate <= f_x(x_candidate)) {
count <- count + 1
samples[count] <- x_candidate
}
}
# Визуализация полученной выборки
hist(samples, probability = TRUE, breaks = 30, col = "lightblue", main = "Гистограмма выборки и теоретическая плотность")
curve(f_x(x), add = TRUE, col = "red", lwd = 2)
# Проверка гипотезы согласия
ks_test_result <- ks.test(samples, function(x) integrate(f_x, 0, x)$value)
source("~/imitation_modeling/Lab1/task1_1.R")
set.seed(42)  # Фиксируем случайность
set.seed(42)  # Фиксируем случайность
set.seed(42)  # Фиксируем случайность
# Определяем функцию плотности
f_x <- function(x) {
(1 / (4 * pi)) * (2 + cos(x)) * (x >= 0 & x <= 2)
}
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
set.seed(42)  # Фиксируем случайность
# Генерация выборки методом принятия-отбора
n <- 1000  # Размер выборки
samples <- numeric(n)
count <- 0
while (count < n) {
x_candidate <- runif(1, 0, 2)  # Генерируем x из U(0,2)
y_candidate <- runif(1, 0, 1 / (4 * pi) * 3)  # Верхняя граница f(x)
if (y_candidate <= f_x(x_candidate)) {
count <- count + 1
samples[count] <- x_candidate
}
}
integrate(f_x, lower = 0, upper = x)$value
# Функция распределения (CDF) на основе интеграла плотности
F_x <- Vectorize(function(x) {
integrate(f_x, lower = 0, upper = x)$value
})
# Проверка гипотезы согласия
ks_test_result <- ks.test(samples, F_x)
print(ks_test_result)
set.seed(42)  # Фиксируем случайность
# Определяем функцию плотности
# f_x определена на интервале [0, 2]. В остальном она равна 0
f_x <- function(x) {
(1 / (4 * pi)) * (2 + cos(x)) * (x >= 0 & x <= 2)
}
# Генерация выборки методом принятия-отбора
n <- 1000  # Размер выборки
samples <- numeric(n)
count <- 0
while (count < n) {
x_candidate <- runif(1, 0, 2)  # Генерируем x из U(0,2) - равномерное распределение
max_f_x = max(f_x)
# (плотность U ) = 1 / 2
# max y_candidate  * 1 / 2 >= max f_x -> max y_candidate = max f_x / (плотность U ) = (4 * pi) * 3
y_candidate <- runif(1, 0, 1 / (4 * pi) * 3)  # Верхняя граница f(x)
if (y_candidate <= f_x(x_candidate)) {
count <- count + 1
samples[count] <- x_candidate
}
}
set.seed(42)  # Фиксируем случайность
# Определяем функцию плотности
# f_x определена на интервале [0, 2]. В остальном она равна 0
f_x <- function(x) {
(1 / (4 * pi)) * (2 + cos(x)) * (x >= 0 & x <= 2)
}
# Генерация выборки методом принятия-отбора
n <- 1000  # Размер выборки
samples <- numeric(n)
count <- 0
max_f_x = max(f_x)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
if (y_candidate <= f_x(x_candidate)) {
count <- count + 1
samples[count] <- x_candidate
}
set.seed(42)  # Фиксируем случайность
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
set.seed(42)  # Фиксируем случайность
# Определяем функцию плотности
# f_x определена на интервале [0, 2]. В остальном она равна 0
f_x <- function(x) {
(1 / (4 * pi)) * (2 + cos(x)) * (x >= 0 & x <= 2)
}
# Генерация выборки методом принятия-отбора
n <- 10000  # Размер выборки
samples <- numeric(n)
count <- 0
while (count < n) {
x_candidate <- runif(1, 0, 2)  # Генерируем x из U(0,2) - равномерное распределение
# max f_x =  3 / (4 * pi)
# (плотность U ) = 1 / 2
# max y_candidate  * 1 / 2 >= max f_x -> max y_candidate = max f_x / (плотность U )
y_candidate <- runif(1, 0, 3 / (2 * pi))  # Верхняя граница f(x)
if (y_candidate <= f_x(x_candidate)) {
count <- count + 1
samples[count] <- x_candidate
}
}
# Визуализация полученной выборки
hist(samples, probability = TRUE, breaks = 30, col = "lightblue", main = "Гистограмма выборки и теоретическая плотность")
curve(f_x(x), add = TRUE, col = "red", lwd = 2)
# Функция распределения (CDF) на основе интеграла плотности
F_x <- Vectorize(function(x) {
integrate(f_x, lower = 0, upper = 2)$value
})
# Проверка гипотезы согласия
ks_test_result <- ks.test(samples, F_x)
print(ks_test_result)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
# Генерация случайного вектора X из многомерного нормального распределения
X <- mvrnorm(n, mu, Sigma)
install.packages("MASS")
library(MASS)
# Шаг 1: Генерация выборки
set.seed(42)  # Для воспроизводимости
n <- 100  # Размер выборки
p <- 3    # Размерность вектора
library(MASS)
# Шаг 1: Генерация выборки
set.seed(42)  # Для воспроизводимости
n <- 100  # Размер выборки
p <- 3    # Размерность вектора
# Параметры многомерного нормального распределения
mu <- c(0, 0, 0)  # Вектор средних
Sigma <- matrix(c(1, 0.5, 0.5, 0.5, 1, 0.3, 0.5, 0.3, 1), nrow = 3)  # Матрица ковариаций
View(Sigma)
# Генерация случайного вектора X из многомерного нормального распределения
X <- mvrnorm(n, mu, Sigma)
View(X)
# Шаг 2: Оценка ковариационной матрицы
cov_X <- cov(X)
View(cov_X)
# Шаг 3: Вычисление коэффициента корреляции между Xi и Xj (например, X1 и X2)
i <- 1  # Индекс первой переменной
j <- 2  # Индекс второй переменной
r_ij <- cor(X[, i], X[, j])
# Шаг 4: Проверка гипотезы для корреляции
rho_0 <- 0.5  # Требуемое значение корреляции
t_stat <- (r_ij - rho_0) / sqrt((1 - r_ij^2) / (n - 2))
# Степени свободы
df <- n - 2
# p-значение
p_value <- 2 * (1 - pt(abs(t_stat), df))
# Результаты
list(cov_X = cov_X, correlation = r_ij, t_stat = t_stat, p_value = p_value)
View(cov_X)
source("~/imitation_modeling/Lab1/task1_2.R", echo=TRUE)
View(results)
source("~/imitation_modeling/Lab1/task1_2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task2.R", echo=TRUE)
install.packages("ggplot2")
source("~/imitation_modeling/Lab1/task2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task3.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task3.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task3.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task3.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task3.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task3.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task3.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task3.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task3.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task4.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task4.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task4.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task4.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task5.R", echo=TRUE)
install.packages("plotly")
source("~/imitation_modeling/Lab1/task5.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task5.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task5.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task5.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task5.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task5.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
\[
# № 1_2
\[
source("~/imitation_modeling/Lab1/task2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task3.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task3.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task3.R", echo=TRUE)
View(Z)
View(S_T)
source("~/imitation_modeling/Lab1/task4.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task4.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task4.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task4.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task4.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task4.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task4.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task5.R", echo=TRUE)
View(grid)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_2.R", echo=TRUE)
View(ks_test_result)
source("~/imitation_modeling/Lab1/task1_2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task3.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task4.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task5.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task5.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_1.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task1_2.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task3.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task3.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task3.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task3.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task3.R", echo=TRUE)
View(S_T)
source("~/imitation_modeling/Lab1/task3.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task3.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task3.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task5.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task5.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task5.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task5.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task5.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task5.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task5.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task4.R", echo=TRUE)
source("~/imitation_modeling/Lab1/task3.R", echo=TRUE)
View(Z)
